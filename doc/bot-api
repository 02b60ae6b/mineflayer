// http://code.google.com/p/jsdoc-toolkit/

/**
 * Vocabulary
 *
 * meter - a block is 1 meter cubed, or 1x1x1.
 */

// Classes

/**
 * Represents a 3D coordinate/location in meters.
 * NOTE: this coordinate system is different from Notch's South-Up-West system.
 * Use toNotchCoord() and fromNotchCoord() to translate between coordinate systems.
 * 
 * Example:
 * var point = new mf.Point(0, 0, 0);
 *
 * Properties:
 * x {Number}
 * y {Number}
 * z {Number}
 *
 * @param {Number} x east
 * @param {Number} y north
 * @param {Number} z up
 *
 * NOT IMPLEMENTED
 */
mf.Point(x, y, z)

/**
 * Contains a snapshot of an entity's state.
 *
 * Properties:
 * entity_id {Number} the id of this entity.
 * type {EntityType}
 * position {Point} The center of the bottom of of the entity.
 * velocity {Point} The entity's velocity in meters per second squared.
 * yaw {Number} [0, 2pi] Rotation around z axis. 0 is +x. pi/2 is +y. pi is -x. 3pi/2 is -y.
 * pitch {Number} [-pi/2, pi/2] 0 is parallel to the ground. pi/2 is up. -pi/2 is down.
 * on_ground {Boolean} True if you are not free-falling.
 *
 * Additional properties when type is Player:
 * username {String}
 * held_item {ItemType} the item the player is holding in their hand
 *
 * Additional properties when type is Mob:
 * mob_type {MobType}
 *
 * Additional properties when type is Pickup:
 * item {Item}
 *
 * NOT IMPLEMENTED
 */
mf.Entity


// Enums

/**
 * Members:
 * Player
 * Mob
 * Pickup
 */
mf.EntityType

/**
 * The id of blocks and items. See the output of examples/reflect.js for a full listing of names.
 */
mf.ItemType 

/**
 * Which side of a block, if any.
 *
 * Members:
 * NoDirection
 * NegativeX (West)
 * PositiveX (East)
 * NegativeY (South)
 * PositiveY (North)
 * NegativeZ (Down)
 * PositiveZ (Up)
 *
 * NOT IMPLEMENTED
 */
mf.Face

/**
 * Members:
 * Pig
 * Sheep
 * Cow
 * Chicken
 * Squid
 * ZombiePigman
 * Spider
 * Zombie
 * Skeleton
 * SpiderJockey
 * Creeper
 * Slime
 * Ghast
 * Human
 * Pigman
 * Giant
 *
 * NOT IMPLEMENTED
 */
mf.Mob

/**
 * Members:
 * BlockBroken
 * Interrupted
 *
 * NOT IMPLEMENTED
 */
mf.StoppedDiggingReason

/**
 * An array of all the serializeable type names in the mf object.
 *
 * NOT IMPLEMENTED
 */
mf.serializableTypeNames

// IMPLEMENTED

/**
 * runs a script with a path relative to the current script.
 * modularize your bot by using this function to import components.
 * @param {String} path The filepath to the script including the extension.
 */
mf.include(path)

/**
 * Call a function later.
 * @param {Function} func The function that you want to execute later.
 * @param {Number} time The amount of milliseconds you want to wait before executing func.
 * @returns {Number} an ID which you can use to cancel the timeout.
 */
mf.setTimeout(func, time)

/**
 * Stop a timeout that is in progress
 * @param {Number} id The ID which you got from setTimeout.
 */
mf.clearTimeout(id)

/**
 * Execute a function on a set internal.
 * @param {Function} func The function that you want to execute every time milliseconds.
 * @param {Number} time The interval in milliseconds you want to wait between executing func.
 */
mf.setInterval(func, time)

/**
 * Stop an interval that is in progress
 * @param {Number} id The ID which you got from setInterval.
 */
mf.clearInterval(id)

/**
 * Simply prints a line of text to stderr. useful for debugging.
 * @param {String} line The line to print to stdout.
 */
mf.debug(line)

/**
 * Prints a string to stdout. Does not put a newline character at the end.
 * @param {String} string The string to print to stdout.
 */
mf.print(string)

/**
 * Reads a text file and returns the contents as a string or undefined.
 * @param {String} path The path to the file
 * @return {String} or undefined
 *
 * NOT IMPLEMENTED
 */
mf.readFile(path)

/**
 * Writes a text file with the specified contents.
 * @param {String} path The path to the file
 * @param {String} contents the contents
 *
 * NOT IMPLEMENTED
 */
mf.writeFile(path)

/**
 * Sends a message over chat. breaks up big messages for you
 * @param {String} message The message to send to everyone on the server.
 */
mf.chat(message)

/**
 * Disconnects from server and exits the program.
 */
mf.exit()

/**
 * @returns {String} The name you are logged in as.
 */
mf.username()

/**
 * Gets the number of items you can stack together.
 * @param {Number} item The ID of the item you want to check the stack height of. See the mf.ItemType enum.
 * @returns {Number} The number of items of type item you can stack together, or-1 if that item doesn't exist.
 */
mf.itemStackHeight(item)

/**
 * Tells your health.
 * @return {Number} health The number of half-hearts that you have, out of 20.
 */
mf.health()

/**
 * Returns the block at the absolute location in the world. You don't need to worry about block alignment.
 * @param {Number} point
 * @return {Object} block object with these fields:
 *          type {Number} - See mf.ItemType enum.
 *          TODO: other fields as needed
 */
mf.blockAt(point)

/**
 * Returns a snapshot of your state in the world as an entity. Modifying the object does nothing.
 * @returns {Entity}
 */
mf.self()

// NOT YET IMPLEMENTED

/**
 * Returns a snapshot of the entity with the given entity id or undefined if the entity id cannot be found.
 * Modifying the object does nothing.
 * @param {Number} entity_id
 * @return {Entity} or undefined
 */
mf.entity(entity_id)

/**
 * Returns the entity id of the player with the given username or undefined if the username is not visible.
 * @param {String} username
 * @return {Number} or undefined
 */
mf.userEntityId(username)

/**
 * @param {Point} point The coordinates you want to translate.
 * @returns {Point} point translated into Notch's coordinate system.
 */
mf.toNotchCoord(point)

/**
 * @param {Point} point The coordinates you want to translate.
 * @returns {Object} point Notch's coordinate system into something more sensical.
 */
mf.fromNotchCoord(point)

// TODO: /kill and /tell as separate functions
// TODO: op commands such as /give as separate functions


/**
 * Looks in a direction. Probably strictly asthetic.
 * @param {Number} yaw The number of radians to rotate around the Z axis, starting from due east. Counter clockwise.
 * @param {Number} pitch Number of radians to point up or down. 0 means straight forward. pi / 2 means straight up. -pi / 2 means straight down.
 */
mf.look(yaw, pitch)

/**
 * Begin digging into a block with the currently equipped item. When you finally break through the block, or you are interrupted for any reason, you will get an onStoppedDigging() event.
 * @param {Point} point
 */
mf.startDigging(point)

/**
 * Place the currently equipped item, with some exceptions. If the block at
 * point is a chest, furnace, workbench, etc, you will "activate" the block.
 * If the equipped item is food, you will eat it.
 * @param {Point} block The coordinates of the block that you want to place the block on.
 * @param {Number} face Which side of the block you want to place the block on. See the mf.Face enum.
 */
mf.placeBlock(block, face)

/**
 * Looks for an item in your inventory and equips it. If you don't have the item, nothing happens.
 * @param {Number} item The item ID of the item you want to equip.
 */
mf.equipItem(item)

/**
 * Gets the id of item you are holding.
 * @returns {Number} item_id What you are now equipped with.
 */
mf.equippedItem()

/**
 * Looks for armor in your inventory and equips it. If you don't have the armor, nothing happens.
 * @param {Number} item The item ID of the armor you want to equip.
 */
mf.equipArmor(item)

/**
 * Counts how many of a certain type of item you have.
 * @param {Number} item The item ID of the item you want to count.
 * @returns {Number} The number of items of that type that you have in all of your inventory slots combined. 
 */
mf.countInventoryItemsOfType(item)

/**
 * Lists all of your inventory
 * @returns {Object} An object with two properties:
 *                   items - an Array of item ids
 *                   count - an object with every item id from items as a property name, and the property value is the total number of those items that you have.
 */
mf.inventory()

/**
 * Tells how much room you have left in your inventory. No need to worry about merging stacks; this function takes that into account automatically.
 * @param {Number} item The item ID that you want to see how many more will fit in your inventory.
 * @returns {Number} How many more of those items will fit.
 */
mf.inventorySpaceLeft(item)

/**
 * Tells how many free slots you have open in your inventory. No need to worry about merging stacks; this method takes that into account automatically.
 * @returns {Number} The total number of empty inventory slots.
 */
mf.inventorySlotsLeft()

/**
 * Tells what time it is, also known as where the sun or moon is in the sky.
 * @returns {Number} The number of real life seconds since dawn. This ranges from 0 to 1200 since a day is 20 minutes. See also onTimeUpdated().
 */
mf.timeOfDay()

/**
 * Teleports you to the position specified.
 */
mf.hax.setPosition(point)

// TODO: moving around
// TODO: using items. same as place block?
// TODO: crafting
// TODO: attacking
// TODO: inventory manipulation


// Events: fill in the ... part of the method.

// IMPLEMENTED:

/**
 * Called when the bot successfully logs into a server.
 */
mf.onConnected(function() {...})

/**
 * Called when the bot receives a chat message.
 * @param {String} user The username of the person sending the message.
 * @param {String} message The content of the message.
 */
mf.onChat(function(user, message) {...})

/**
 * Called when blocks are updated.
 * @param {Point} start The absolute position of the first block that was updated.
 * @param {Point} size The number of blocks that were updated.
 */
mf.onChunkUpdated(function(start, size) {...})

/**
 * Called when your position is changed. See also position().
 */
mf.onPositionUpdated(function() {...})

/**
 * Called when you get hit, take fall damage, eat food, etc. See also health().
 */
mf.onHealthChanged(function() {...})

/**
 * Called when the bot dies.
 */
mf.onDeath(function() {...})

// NOT YET IMPLEMENTED

/**
 * Called when an entity is discovered.
 * This can happen when an entity is created or when it comes into view.
 * See also mf.entity(entity_id).
 * @param {Number} entity_id The id of the entity
 */
mf.onEntitySpawned(function(entity_id) {...})

/**
 * Called when an entity vanishes from known existence.
 * This can happen when an entity is destroyed or when it goes out of view.
 * Calling mf.entity(entity_id) will return undefined once this event occurs.
 * @param {Number} entity_id The id of the entity
 */
mf.onEntityDespawned(function(entity_id) {...})

/**
 * Called when an entity moves.
 * See also mf.entity(entity_id).
 * @param {Number} entity_id The id of the entity
 */
mf.onEntityMoved(function(entity_id) {...})

/**
 * Called when you have spawned and can start moving about.
 */
mf.onSpawn(function() {...})

/**
 * Called when you have stopped digging for some reason.
 * @param {Number} reason Why you have stopped digging. See the mf.StoppedDiggingReason enum.
 */
mf.onStoppedDigging(function(reason) {...})

/**
 * Called when what you are currently equipped with has changed. For example, if your pickaxe breaks or you eat food. See also equippedItem().
 */
mf.onEquippedItemChanged(function() {...})

/**
 * Called when anything in your inventory changes. See also inventory().
 */
mf.onInventoryUpdated(function() {...})

/**
 * Called when the time of day changes. See also timeOfDay().
 */
mf.onTimeUpdated(function() {...})

/**
 * Called when another user joins the server.
 * @param {String} username The username of the person joining.
 */
mf.onUserJoined(function(username) {...})

/**
 * Called when another user quits the server.
 * @param {String} username The username of the person quitting.
 */
mf.onUserQuit(function(username) {...})

// TODO: other non-chat type messages such as whispers.

/**
 * removes the handler from the event.
 *
 * example:
 * mf.onConnected(function handleConnected() {
 *     mf.debug("connected first time");
 *     mf.removeHandler(mf.onConnected, handleConnected);
 * });
 *
 * @param {Object} event_registrar One of mf.on*
 * @param {Function} handler function registered previously with the event
 */
mf.removeHandler(event_registrar, handler)



