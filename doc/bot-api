// http://code.google.com/p/jsdoc-toolkit/

/**
 * Vocabulary
 *
 * meter - a block is 1 meter cubed, or 1x1x1.
 * x, y, z - East, North, Up respectively. Coordinates are always specified in meters.
 *          NOTE: this coordinate system is different from Notch's South-Up-West system.
 *
 * Enums
 * 
 * mf.Face - Which side of a block, if any.
 *     NoDirection
 *     NegativeY
 *     PositiveY
 *     NegativeX
 *     PositiveX
 *     NegativeZ
 *     PositiveZ
 *
 * mf.Mob
 *     Pig
 *     Sheep
 *     Cow
 *     Chicken
 *     Squid
 *     ZombiePigman
 *     Spider
 *     Zombie
 *     Skeleton
 *     SpiderJockey
 *     Creeper
 *     Slime
 *     Ghast
 *     Human
 *     Pigman
 *     Giant
 *
 * mf.StoppedDiggingReason
 *     BlockBroken
 *     Interrupted
 */

// Methods. All properties of the mf object, e.g. mf.print("hi");

// IMPLEMENTED

/**
 * Simply prints a string to stdout. useful for debugging.
 * @param {String} line The line to print to stdout.
 */
print(line)

/**
 * Sends a message over chat. breaks up big messages for you
 * @param {String} message The message to send to everyone on the server.
 */
chat(message)

/**
 * Disconnects from server and exits the program.
 */
exit()

// NOT YET IMPLEMENTED

// TODO: /kill and /tell as separate functions
// TODO: op commands such as /give as separate functions


/** @return {Number} health out of 20 */
health()

/**
 * Returns the block at the absolute x,y,z location in the world
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @return {Object} block object with these fields:
 *          type {Number} - block type id
 *          metadata {Number} - Notch's metadata for the block
 */
blockAt(x, y, z)

/**
 * Looks in a direction. Probably strictly asthetic.
 * @param {Number} yaw The number of radians to rotate around the Z axis, starting from due east. Counter clockwise.
 * @param {Number} pitch Number of radians to point up or down. 0 means straight forward. pi / 2 means straight up. -pi / 2 means straight down.
 */
look(yaw, pitch)

/**
 * Begin digging into a block with the currently equipped item. When you finally break through the block, or you are interrupted for any reason, you will get an onStoppedDigging() event.
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 */
startDigging(x, y, z)

/**
 * Place the currently equipped item, with some exceptions. If the block at x, y, z is a chest, furnace, workbench, etc, you will "activate" the block. If the equipped item is food, you will eat it.
 * @param {Number} x
 * @param {Number} y
 * @param {Number} z
 * @param {Number} face The side of the block you want to start digging into. See the mf.Face enum.
 */
placeBlock(x, y, z, face)

/**
 * Looks for an item in your inventory and equips it. If you don't have the item, nothing happens.
 * @param {Number} item The item ID of the item you want to equip.
 */
equipItem(item)

/**
 * Looks for armor in your inventory and equips it. If you don't have the armor, nothing happens.
 * @param {Number} item The item ID of the armor you want to equip.
 */
equipArmor(item)

/**
 * Counts how many of a certain type of item you have.
 * @param {Number} item The item ID of the item you want to count.
 * @returns {Number} The number of items of that type that you have in all of your inventory slots combined. 
 */
countInventoryItemsOfType(item)

/**
 * Lists all of your inventory
 * @returns {Object} An object with two properties:
 *                   items - an Array of item ids
 *                   count - an object with every item id from items as a property name, and the property value is the total number of those items that you have.
 */
inventory()

/**
 * Tells how much room you have left in your inventory. No need to worry about merging stacks; this function takes that into account automatically.
 * @param {Number} item The item ID that you want to see how many more will fit in your inventory.
 * @returns {Number} How many more of those items will fit.
 */
inventorySpaceLeft(item)

/**
 * Tells how many free slots you have open in your inventory. No need to worry about merging stacks; this method takes that into account automatically.
 * @returns {Number} The total number of empty inventory slots.
 */
inventorySlotsLeft()

/**
 * Returns an object representing your state in the world.
 * @returns {Object} An object with these properties:
 *                      x {Number} Where center of the bottom of your feet is
 *                      y {Number} Where center of the bottom of your feet is
 *                      z {Number} Where center of the bottom of your feet is
 *                      dx {Number} Your velocity in meters per second squared
 *                      dy {Number} Your velocity in meters per second squared
 *                      dz {Number} Your velocity in meters per second squared
 *                      stance {Number} [0.1, 1.65] How tall you are. For example if you crouch you are shorter.
 *                      yaw {Number} [0, 2pi] Rotation around z axis. 0 is +x. pi/2 is +y. pi is -x. 3pi/2 is -y.
 *                      pitch {Number} [-pi/2, pi/2] 0 is parallel to the ground. pi/2 is up. -pi/2 is down.
 *                      roll {Number} [-pi, pi] Usually ignored. 0 is level. pi/2 is left ear pointing downward.
 *                      on_ground {Boolean} True if you are not free-falling.
 */
myPosition()

/**
 * Tells what time it is, also known as where the sun or moon is in the sky.
 * @returns {Number} The number of real life seconds since dawn. This ranges from 0 to 1200.
 */
timeOfDay()

// TODO: moving around
// TODO: using items. same as place block?
// TODO: crafting
// TODO: attacking
// TODO: inventory manipulation

// Events. To listen, use MineflayerBot.prototype.<event name> = function() {}

// IMPLEMENTED:

/**
 * Called when the bot successfully logs into a server.
 */
onConnected()

/**
 * Called on a set interval to give you a spot to do continuous processing.
 */
onNextFrame()

/**
 * Called when the bot receives a chat message.
 * @param {String} user The username of the person sending the message.
 * @param {String} message The content of the message.
 */
onChat(user, message)

// NOT YET IMPLEMENTED

/** Called when the bot dies. */
onDeath()

/**
 * Called when blocks are updated.
 * @param {Number} start_x The absolute x position of the first block that was updated.
 * @param {Number} start_y The absolute y position of the first block that was updated.
 * @param {Number} start_z The absolute z position of the first block that was updated.
 * @param {Number} x_count The number of blocks in the x direction that were updated.
 * @param {Number} y_count The number of blocks in the y direction that were updated.
 * @param {Number} z_count The number of blocks in the z direction that were updated.
 */
onChunkUpdate(start_x, start_y, start_z, x_count, y_count, z_count)

/**
 * Called when a mob (Cow, Spider, Squid, etc) is created.
 * @param {Number} id A unique identifier for this specific mob.
 * @param {Number} type The class of mob that was spawned. See the mf.Mob enum.
 * @param {Number} x The absolute x position where the mob spawned.
 * @param {Number} y The absolute y position where the mob spawned.
 * @param {Number} z The absolute z position where the mob spawned.
 */
onMobSpawn(id, type, x, y, z)

/**
 * Called when a mob moves.
 * @param {Number} id The unique identifier for this specific mob.
 * @param {Number} x The absolute x position where the mob has just moved to.
 * @param {Number} y The absolute y position where the mob has just moved to.
 * @param {Number} z The absolute z position where the mob has just moved to.
 */
onMobMovement(id, x, y, z)

/**
 * Called when you get hit, take fall damage, eat food, etc.
 * @param {Number} health The number of half-hearts that you have, out of 20.
 */
onHealthChanged(new_health)

/**
 * Called when you have spawned and can start moving about.
 */
onSpawn()

/**
 * Called when you have stopped digging for some reason.
 * @param {Number} reason Why you have stopped digging. See the mf.StoppedDiggingReason enum.
 */
onStoppedDigging(reason)

/**
 * Called when what you are currently equipped with has changed. For example, if your pickaxe breaks or you eat food.
 * @param {Number} new_item_id What you are now equipped with, if anything.
 */
onEquippedItemChanged(new_item_id)

/**
 * Called when anything in your inventory changes. Use inventory() to get a list of everything.
 */
onInventoryUpdated()

/**
 * @param {Number} time The number of real life seconds since dawn. This ranges from 0 to 1200 since a day is 20 minutes.
 */
onTimeUpdated(time)

/**
 * Called when another user joins the server.
 * @param {String} username The username of the person joining.
 */
onUserJoined(username)

/**
 * Called when another user quits the server.
 * @param {String} username The username of the person quitting.
 */
onUserQuit(username)

// TODO: other non-chat type messages such as whispers.




