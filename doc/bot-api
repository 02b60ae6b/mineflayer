// http://code.google.com/p/jsdoc-toolkit/

/**
 * Vocabulary
 *
 * meter - a block is 1 meter cubed, or 1x1x1.
 */


// Classes


/**
 * Represents a 3D coordinate/location in meters.
 * NOTE: this East-North-Up coordinate system is different from Notch's
 * South-Up-West system.  Use toNotchCoord() and fromNotchCoord() to translate
 * between coordinate systems.
 * 
 * Example:
 * var point = new mf.Point(0, 0, 0);
 *
 * Properties:
 * x {Number}
 * y {Number}
 * z {Number}
 *
 * @param {Number} x east
 * @param {Number} y north
 * @param {Number} z up
 */
mf.Point(x, y, z)

// TODO: document member functions of Point

/**
 * Contains a snapshot of an entity's state.
 *
 * Properties:
 * entity_id {Number} the id of this entity.
 * type {mf.EntityType}
 * position {mf.Point} The center of the bottom of of the entity.
 * velocity {mf.Point} The entity's velocity in meters per second squared.
 * yaw {Number} [0, 2pi] Rotation around z axis. 0 is +x. pi/2 is +y. pi is -x. 3pi/2 is -y.
 * pitch {Number} [-pi/2, pi/2] 0 is parallel to the ground. pi/2 is up. -pi/2 is down.
 * on_ground {Boolean} True if you are not free-falling.
 * height {Number} The Z-dimension of the bounding box.
 *
 * Additional properties when type is Player:
 * username {String}
 * held_item {mf.ItemType} the item the player is holding in their hand
 *
 * Additional properties when type is Mob:
 * mob_type {mf.MobType}
 *
 * Additional properties when type is Pickup:
 * item {mf.Item}
 */
mf.Entity

/**
 * Represents a block or item or stack of blocks or items.
 *
 * Examples:
 * var item1 = new mf.Item(mf.ItemType.Dirt, 64)
 * var item2 = new mf.Item(mf.ItemType.StoneSword)
 *
 * Properties:
 * type {mf.ItemType}
 * count {Number}
 *
 * TODO: include the uses/data field somehow
 *
 * @param {mf.ItemType}
 * @param {Number} optional, defaults to 1
 */
mf.Item(type, count)

// Enums

/**
 * Members:
 *      Player
 *      Mob
 *      Pickup
 */
mf.EntityType

/**
 * The id of blocks and items. See the output of examples/reflect.js for a full listing of names.
 */
mf.ItemType 

/**
 * Which side of a block, if any.
 *
 * Members:
 *      NoDirection
 *      NegativeX (West)
 *      PositiveX (East)
 *      NegativeY (South)
 *      PositiveY (North)
 *      NegativeZ (Down)
 *      PositiveZ (Up)
 */
mf.Face

/**
 * Members:
 *      Creeper
 *      Skeleton
 *      Spider
 *      GiantZombie
 *      Zombie
 *      Slime
 *      Ghast
 *      ZombiePigman
 *      Pig
 *      Sheep
 *      Cow
 *      Chicken
 */
mf.Mob

/**
 * Members:
 *      BlockBroken
 *      Aborted
 */
mf.StoppedDiggingReason

/**
 * Represents an input action as if you were pressing buttons on a keyboard.
 * Members:
 *      NoControl
 *      Forward
 *      Back
 *      Left
 *      Right
 *      Jump
 *      Crouch - NOT HOOKED UP
 *      DiscardItem - NOT HOOKED UP
 *      Action1 (left click) - NOT HOOKED UP
 *      Action2 (right click) - NOT HOOKED UP
 */
mf.Control

/**
 * Members:
 *      NoAnimation
 *      SwingArm
 *      Damage
 *      Crouch
 *      Uncrouch
 */
mf.AnimationType

/**
 * Members:
 *      Inventory
 *      Chest
 *      Workbench
 *      Furnace
 *      Dispenser
 */
mf.WindowType

/**
 * For sending window clicks.
 * Members:
 *      Left
 *      Right
 */
mf.MouseButton



// Methods



/**
 * runs a script with a path relative to the current script.
 * modularize your bot by using this function to import components.
 * @param {String} path The filepath to the script including the extension.
 */
mf.include(path)

/**
 * Call a function later.
 * @param {Function} func The function that you want to execute later.
 * @param {Number} time The amount of milliseconds you want to wait before executing func.
 * @returns {Number} an ID which you can use to cancel the timeout.
 */
mf.setTimeout(func, time)

/**
 * Stop a timeout that is in progress
 * @param {Number} id The ID which you got from setTimeout.
 */
mf.clearTimeout(id)

/**
 * Execute a function on a set internal.
 * @param {Function} func The function that you want to execute every time milliseconds.
 * @param {Number} time The interval in milliseconds you want to wait between executing func.
 */
mf.setInterval(func, time)

/**
 * Stop an interval that is in progress
 * @param {Number} id The ID which you got from setInterval.
 */
mf.clearInterval(id)

/**
 * Simply prints a line of text to stderr. useful for debugging.
 * @param {String} line
 */
mf.debug(line)

/**
 * Prints a string to stdout. Does not put a newline character at the end.
 * @param {String} string
 */
mf.print(string)

/**
 * Reads a text file and returns the contents as a string. Returns undefined if the file cannot be opened.
 * @param {String} path The path to the file
 * @return {String} or undefined
 */
mf.readFile(path)

/**
 * Writes a text file with the specified contents.
 * @param {String} path The path to the file
 * @param {String} contents
 */
mf.writeFile(path, contents)

/**
 * Sends a publicly broadcast chat message. Breaks up big messages into multiple chat messages as necessary.
 * @param {String} message
 */
mf.chat(message)

/**
 * Disconnects from server and exits the program.
 * @param {Number} return_code Optional. defaults to 0.
 */
mf.exit(return_code)

/**
 * Gets the number of items you can stack together.
 * @param {mf.ItemType} item The ID of the item you want to check the stack height of.
 * @returns {Number} The number of items of type item you can stack together, or -1 if that item doesn't exist.
 */
mf.itemStackHeight(item)

/**
 * Returns whether the block type has any physical presence with respect to physics.
 * This is false for air, flowers, torches, etc.
 *
 * Examples:
 * if (mf.isPhysical(mf.blockAt(some_point).type)) {
 *     // water physics
 * }
 *
 * @param {mf.ItemType} block_type
 */
mf.isPhysical(block_type)

/**
 * Returns whether the block type is non-physical and safe to stand in.
 * This returns false for lava, fire, and everything that mf.isPhysical returns true for.
 * @param {mf.ItemType} block_type
 */
mf.isSafe(block_type)

/**
 * Returns whether the block type is diggable.
 * This returns false for air, bedrock, water, lava, etc.
 * @param {mf.ItemType} block_type
 */
mf.isDiggable(block_type)

/**
 * Tells your health.
 * @return {Number} health The number of half-hearts that you have, out of 20.
 */
mf.health()

/**
 * Returns the block at the absolute location in the world.
 * @param {Number} point Coordinates do not need to be rounded.
 * @return {mf.Item} block object
 */
mf.blockAt(point)

/**
 * Returns whether or not you're able to place your currently equipped item
 * on the face of the block at point.
 * Takes into account distance, whether something is in your way,
 * spawn protection, whether the target block is activatable, and what you're
 * equipped with.
 * In order to actually place a block, you should use this formula:
 * mf.lookAt(point); // face the block you want to build next to
 * mf.setControlState(Action2, true); // press right click
 * mf.setControlState(Action2, false); // release right click
 * If this is too hard and you're willing to cheat, you can use
 * mf.hax.placeBlock(point, face);
 * @param {Number} point The location of the block you want to check.
 * @param {mf.Face} face The face of the block you want to attach to.
 */
mf.canPlaceBlock(point, face)

/**
 * The block you're looking directly at.
 * NOT YET IMPLEMENTED
 * @returns {Object} object with properties:
 *      block {mf.Block} - the targeted block
 *      face {mf.Face} - which face is targeted
 *      coord {mf.Point} - coordinates of the block you're looking at
 */
mf.target()

/**
 * Returns a snapshot of your state in the world as an entity. Modifying the object does nothing.
 * @returns {mf.Entity}
 */
mf.self()

/**
 * Sets the input state of a control. Use this to move around, jump, and
 * place and activate blocks. It is as if you are virtually pressing keys on a
 * keyboard. Your actions will be bound by the physics engine, (unless you
 * use the mf.hax functions).
 * @param {mf.Control} control 
 * @param {Boolean} state Whether or not you are activating this control.
 * E.g. whether or not the virtual button is held down.
 */
mf.setControlState(control, state)

/**
 * Sets all control states to false.
 */
mf.clearControlStates()

/**
 * Looks at the given point specified in absolute coordinates. See also mf.look.
 * @param {mf.Point} point
 * @param {mf.Face} [face] Optional, which side of the block located at point
 * to look at. This is to help you look exactly at the face of a block for
 * building purposes. See mf.Face.
 * SECOND PARAMETER NOT YET IMPLEMENTED
 */
mf.lookAt(point, face)

/**
 * Call this when you're dead to respawn.
 */
mf.respawn()

// cheating methods

/**
 * Place the currently equipped block. If the block at point is a chest,
 * furnace, workbench, etc, this will throw an exception.
 * See mf.activateBlock().
 * If the equipped item is food, this will throw an exception.
 * See mf.setControlState().
 * This method is considered cheating. See description of canPlaceBlock() for
 * an example of how to place blocks without cheating.
 * @param {mf.Point} block The coordinates of the block that you want to place
 * the block on.
 * @param {mf.Face} face Which side of the block you want to place the block
 * on.
 */
mf.hax.placeBlock(block, face)

/**
 * Same as right-clicking. This is for chests, furnaces, note blocks, etc.
 * Throws an exception if the block is not activatable.
 * This method is considered cheating. See description of canPlaceBlock() for
 * an example of how to activate blocks without cheating.
 * @param {mf.Point} block The coordinates of the block that you want to activate
 */
mf.hax.activateBlock(block)


/**
 * Instantly moves you to the position specified.
 * NOTE: Your movement may be rejected by the server. This can happen if you
 * try to go through a wall.
 * @param {mf.Point} point
 */
mf.hax.setPosition(point)

/**
 * Returns the interval between outgoing position updates in milliseconds.
 * Useful for waiting between setPosition calls.
 */
mf.hax.positionUpdateInterval()

/**
 * Turns on/off gravity. When gravity is off, you will not take fall damage.
 * @param {Boolean} value
 */
mf.hax.setGravityEnabled(value)

/**
 * Sends a single attack message to the server.
 * @param {Number} entity_id
 */
mf.hax.attackEntity(entity_id)

/**
 * Returns a snapshot of the entity with the given entity id or undefined if the entity id cannot be found.
 * Modifying the object does nothing.
 * @param {Number} entity_id
 * @return {mf.Entity} or undefined
 */
mf.entity(entity_id)

/**
 * Begin digging into a block with the currently equipped item. When you finally break through the block,
 * or you are interrupted for any reason, you will get an onStoppedDigging() event.
 * @param {mf.Point} point The location of the block to dig.
 */
mf.startDigging(point)


/**
 * Useful for communicating with notchian clients.
 * NOT YET IMPLEMENTED
 * @param {mf.Point} mf_point Point in mineflayer's coordinates.
 * @returns {mf.Point} Point in Notch's coordinates.
 */
mf.toNotchCoord(mf_point)

/**
 * If a player specifies coordinates to a bot, by looking at the numbers when
 * he presses F3, he's probably talking about Notchian coordinates. This method
 * translates them into our coordinate system (see top of this document)
 * NOT YET IMPLEMENTED
 * @param {mf.Point} notch_point Point in Notch's coordinates.
 * @returns {mf.Point} Point in mineflayer's coordinates.
 */
mf.fromNotchCoord(notch_point)

/**
 * Looks in a direction.
 * NOT YET IMPLEMENTED
 * @param {Number} yaw The number of radians to rotate around the Z axis, starting from due east. Counter clockwise.
 * @param {Number} pitch Number of radians to point up or down. 0 means straight forward. pi / 2 means straight up. -pi / 2 means straight down.
 */
mf.look(yaw, pitch)

// TODO: document these
mf.selectedEquipSlot()
mf.selectEquipSlot(slot)

mf.clickInventorySlot(slot, button)
mf.clickUniqueSlot(slot, button)
mf.clickOutsideWindow(button)

mf.openInventoryWindow()
mf.closeWindow()

mf.inventoryItem(slot)
mf.uniqueWindowItem(slot)

/**
 * Tells what time it is, also known as where the sun or moon is in the sky.
 * NOT YET IMPLEMENTED
 * @returns {Number} The number of real life seconds since dawn. This ranges from 0 to 1200 since a day is 20 minutes.
 */
mf.timeOfDay()

// Events: fill in the ... part of the function. See examples for more information.

/**
 * Called when the bot successfully logs into a server.
 */
mf.onConnected(function() {...})

/**
 * Called when the bot hears a publicly broadcast chat message.
 * @param {String} user The username of the person sending the message.
 * @param {String} message The content of the message.
 */
mf.onChat(function(user, message) {...})

/**
 * Called when a chat is received that was no spoken by a player.
 * This includes player joined messages, teleporting notifications, etc.
 * @param {String} message All color codes will be removed
 */
mf.onNonSpokenChat(function(message) {...})

/**
 * Called when blocks are updated.
 * @param {mf.Point} start The absolute position of the first block that was updated.
 * @param {mf.Point} size The number of blocks that were updated.
 */
mf.onChunkUpdated(function(start, size) {...})

/**
 * Called when you spawn. Happens after connecting and after respawning after death.
 */
mf.onSpawn(function() {...})

/**
 * Called when you move. See also self().
 */
mf.onSelfMoved(function() {...})

/**
 * Called when you get hit, take fall damage, eat food, etc. See also health().
 */
mf.onHealthChanged(function() {...})

/**
 * Called when you die.
 */
mf.onDeath(function() {...})

/**
 * Called when an entity is discovered.
 * This can happen when an entity is created or when it comes into view.
 * @param {mf.Entity} entity
 */
mf.onEntitySpawned(function(entity) {...})

/**
 * Called when an entity vanishes from known existence.
 * This can happen when an entity is destroyed or when it goes out of view.
 * @param {mf.Entity} entity
 */
mf.onEntityDespawned(function(entity) {...})

/**
 * Called when an entity moves or in some other way changes state.
 * @param {mf.Entity} entity
 */
mf.onEntityMoved(function(entity) {...})

/**
 * Called when an entity animates
 * @param {mf.Entity} entity
 * @param {mf.AnimationType} animation_type which animation was performed.
 */
mf.onAnimation(function(entity, animation_type) {...})

/**
 * Called when you have stopped digging for some reason.
 * @param {mf.StoppedDiggingReason} reason
 */
mf.onStoppedDigging(function(reason) {...})

/**
 * Called when what you are currently equipped with changes.
 * For example, if your pickaxe breaks or you eat food. See also equippedItem().
 */
mf.onEquippedItemChanged(function() {...})

/**
 * Called when anything in your inventory changes. See also inventoryItem().
 */
mf.onInventoryUpdated(function() {...})

/**
 * Called when you can begin messing with a chest or your inventory.
 * @param {mf.WindowType} window_type
 */
mf.onWindowOpened(function(window_type) {...})

/**
 * removes the handler from the event.
 *
 * example:
 * mf.onChat(function handleChat(username, message) {
 *     mf.debug("got first chat");
 *     mf.removeHandler(mf.onChat, handleChat);
 * });
 *
 * @param {Object} event_registrar One of mf.on*
 * @param {Function} handler function registered previously with the event
 */
mf.removeHandler(event_registrar, handler)

/**
 * An array of all the serializeable type names in the mf object.
 * TODO: wtf is this and when would we ever use it?
 */
mf.serializableTypeNames

